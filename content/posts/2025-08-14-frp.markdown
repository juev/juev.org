---
title: "Миграция с Cloudflare Tunnel на FRP: опыт пошагового перехода"
date: 2025-08-14T12:30:02+0300
tags:
  - cloudflare
  - tailscale
  - network
---

## Введение

Cloudflare Tunnel — удобный способ быстро опубликовать сервис в интернете без проброса портов и прямого доступа к серверу.  
Но зависимость от одного провайдера и внешних факторов может обернуться проблемами.  
В моём случае главным триггером стала блокировка IP-адресов Cloudflare в России, из-за которой доступ к сервису стал невозможен.  
Цель миграции — упростить схему, сократить точки отказа и сохранить полный контроль над соединением.

---

## Исходная точка

- **Сервер**: Synology NAS с установленным [gotosocial](https://gotosocial.org/).  
- **Доступ**: через Cloudflare Tunnel, без проброса портов.  
- **Проблема**: блокировка Cloudflare в России привела к полной потере возможности подключаться к сервису извне.  

**Схема работы:**

```plain
[Браузер] → [Cloudflare] → [Cloudflare Tunnel на NAS] → [gotosocial]
```

---

## Промежуточный шаг: Tailscale + Cloudflare Tunnel на удалённом сервере

Чтобы обойти блокировку, был развёрнут следующий вариант:

- **Tailscale** — приватная mesh-сеть между домашним NAS и VPS в стране, где блокировок нет.
- На VPS запущен **Cloudflare Tunnel**, который публикует сервис в интернет.
- DNS-записи указывали на Cloudflare.

**Плюсы**:

- Работает даже за CGNAT.
- Обход блокировок.
- Не требует проброса портов в домашней сети.

**Минусы**:

- Более сложная архитектура.
- Больше точек отказа: Tailscale, VPS, Cloudflare Tunnel.
- Лишние задержки из-за нескольких промежуточных узлов.

**Схема работы:**

```plain
[Браузер] → [Cloudflare] → [CF Tunnel на VPS] ⇄ [Tailscale] ⇄ [NAS] → [gotosocial]
```

---

## Переход на FRP

В качестве финального решения выбран **FRP (Fast Reverse Proxy)**.  
Теперь схема стала проще и прозрачнее:

1. **На удалённом VPS**:
   - Запущен `frps` (FRP Server).
   - Запущен **Caddy** как веб-сервер и обратный прокси:
     - Принимает входящие HTTP/HTTPS-запросы.
     - Раздаёт статический контент.
     - Обеспечивает работу с SSL-сертификатами через Let’s Encrypt.

2. **Дома**:
   - На NAS запущен `frpc` (FRP Client).
   - Пробрасывает нужные порты для gotosocial на VPS.

**Принцип работы**:  
Запросы к домену приходят на VPS → Caddy → локальный сервис через FRP-туннель.

**Схема работы:**

```plain
[Браузер] → [VPS: Caddy] → [FRP Server] ⇄ [FRP Client на NAS] → [gotosocial]
```

---

## Пример конфигурации

**`frps.ini` (на VPS)**:

```ini
[common]
bind_port = 7000
vhost_http_port = 80
vhost_https_port = 443
```

**`frpc.ini` (на NAS)**:

```ini
[common]
server_addr = your-vps-ip
server_port = 7000

[gotosocial]
type = http
local_port = 8080
custom_domains = social.example.com
```

**`Caddyfile` (на VPS)**:

```json
social.example.com {
    reverse_proxy localhost:8080
    tls {
        issuer acme
    }
}
```

---

## Сравнение подходов

| Критерий      | Cloudflare Tunnel           | Tailscale + CF Tunnel         | FRP + Caddy |
|---------------|-----------------------------|-------------------------------|-------------|
| Латентность   | Средняя                     | Выше из-за двух туннелей      | Минимальная |
| Простота      | Очень простая настройка     | Средняя                       | Простая     |
| Контроль      | Минимальный                 | Средний                       | Полный      |
| Зависимости   | Cloudflare                  | Tailscale, VPS, Cloudflare    | VPS         |

---

## Итоги

- Переход был вызван и блокировками, и желанием уменьшить число посредников.
- Промежуточное решение (Tailscale + Cloudflare Tunnel) помогло обойти блокировки, но оказалось избыточным.
- FRP с Caddy на VPS стал финальным вариантом:
  - Полная автономность.
  - Минимальные задержки.
  - Контроль над сертификатами и маршрутизацией.
